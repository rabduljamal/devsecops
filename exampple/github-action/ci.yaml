name: Build and Push DevSecOps Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  build-and-push:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: security-scan
    permissions:
      contents: read
      packages: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-container-results.sarif"

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-container-results.sarif"

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-push]
    if: always()
    permissions:
      contents: read
      security-events: read

    steps:
      - name: Security Summary Comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { owner, repo, number } = context.issue;

            const body = `
            ## üîí Security Scan Summary

            ### Completed Scans:
            - ‚úÖ **Gitleaks**: Secret detection scan
            - ‚úÖ **Trivy Filesystem**: Source code vulnerability scan  
            - ‚úÖ **Trivy Container**: Container image vulnerability scan
            - ‚úÖ **SBOM**: Software Bill of Materials generated

            ### Image Details:
            - **Registry**: \`${{ env.REGISTRY }}\`
            - **Image**: \`${{ env.IMAGE_NAME }}\`
            - **Digest**: \`${{ needs.build-and-push.outputs.image-digest }}\`

            > üõ°Ô∏è All security scans completed. Check the Security tab for detailed results.
            `;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });

  deploy-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Send webhook to GitOps repo
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITOPS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/${{ secrets.GITOPS_REPO }}/dispatches \
            -d '{
              "event_type": "image-update",
              "client_payload": {
                "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
                "tag": "${{ needs.build-and-push.outputs.image-digest }}",
                "source_repo": "${{ github.repository }}",
                "commit_sha": "${{ github.sha }}",
                "commit_message": "${{ github.event.head_commit.message }}"
              }
            }'

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## üöÄ DevSecOps Pipeline Release ${{ github.ref_name }}

            ### Container Image
            ```
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ### Security Scans
            - ‚úÖ Gitleaks secret detection
            - ‚úÖ Trivy vulnerability scanning
            - ‚úÖ Container security scanning
            - ‚úÖ SBOM generation

            ### Changes
            See commit history for detailed changes.
          draft: false
          prerelease: false
